#ifndef __SYS_MEM__
#define __SYS_MEM__

//////////////////////////////////////////////////////////////////////////////
/** \file
 	\brief Функции распределения памяти с контролем ошибок
 	
 	Функции распределения памяти с контролем ошибочно заданных параметров, ошибок при изменении размера блока и т.п.
 */

#include <stdlib.h>
#include <string.h>
#include "sys_defs.h"

#pragma pack(1)

extern "C"

{

/// Выделение памяти с возможным обнулением. Обертка над malloc. Обнуление производится при помощи memset,
/// в расчете на лучшую оптимизацию компилятором.
/// \param [out] void **mem - указатель на переменную для размещения адреса выделенного массива памяти
/// \param [in] size_t size - размер выделяемого массива памяти
/// \param [in] int zero - признак обнуления памяти (по умолчанию не обнулять)
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
int malloc_r(void **mem, size_t size, int zero = 0);

/// Перераспределение памяти с возможным обнулением добавленного пространства. Контролируется
/// возвращаемое значение стандартной фунции realloc, с тем, чтобы не потерять уазатель на ранее выделенную
/// память.
/// \param [in, out] void **mem - указатель на переменную для размещения адреса перераспределенного массива памяти
/// \param [in] size_t old_size - текущий размер массива памяти
/// \param [in] size_t new_size - новый размер массива памяти
/// \param [in] int zero - признак обнуления памяти (по умолчанию не обнулять)
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке перераспределения памяти
int realloc_r(void **mem, size_t old_size, size_t new_size, int zero = 0);

/// Освобождение выделенной памяти с возможным обнулением
/// \param [in, out] void **mem - указатель на переменную с адресом освобождаемого массива памяти
/// \param [in] size_t size - размер освобождаемого массива памяти, для обнуления (по умолчанию не обнулять)
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
int free_r(void **mem, size_t size = 0);

/// Дублирование строки с выделением памяти под нее, аналог strdup.
/// \param [out] char **dst - указатель на переменную для размещения адреса создаваемой строки
/// \param [in] const char *src - указатель на строку-источник
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
int strdup_r(char **dst, const char *src);

};

/// Макрос для преобразования указателя, передаваемого в функции выделения и освобождения памяти
/// \param [in] mem - указатель на область памяти
#define MEM_PTR(mem) \
	(void **)&mem

/// Макрос для выделения памяти без обнуления
/// \param [in, out] mem - указатель на область памяти
/// \param [in] size - размер области памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSMalloc(mem, size) \
	malloc_r(MEM_PTR(mem), size, 0)

/// Макрос для выделения памяти с обнулением
/// \param [in, out] mem - указатель на область памяти
/// \param [in] size - размер области памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSMallocZero(mem, size) \
	malloc_r(MEM_PTR(mem), size, 1)

/// Макрос для перераспределения памяти без обнуления
/// \param [in, out] mem - указатель на область памяти
/// \param [in] old_size - текущий размер области памяти
/// \param [in] new_size - новый размер области памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSRealloc(mem, old_size, new_size) \
	realloc_r(MEM_PTR(mem), old_size, new_size, 0)

/// Макрос для перераспределения памяти с обнулением
/// \param [in, out] mem - указатель на область памяти
/// \param [in] old_size - текущий размер области памяти
/// \param [in] new_size - новый размер области памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSReallocZero(mem, old_size, new_size) \
	realloc_r(MEM_PTR(mem), old_size, new_size, 1)

/// Макрос для освобождения памяти без обнуления
/// \param [in, out] mem - указатель на область памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSFree(mem) \
	free_r(MEM_PTR(mem))

/// Макрос для освобождения памяти с обнулением
/// \param [in, out] mem - указатель на область памяти
/// \param [in] size - размер области памяти
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSFreeZero(mem, size) \
	free_r(MEM_PTR(mem), size)

/// Макрос для дублирования строки
/// \param [in, out] dst - указатель на создаваемую строку
/// \param [in] src - указатель на строку-источник
/// \return EOK (0) в случае успеха
/// \return EINVAL (22) при ошибке в исходных данных
/// \return ENOMEM (12) при ошибке выделения памяти
#define DRTSStrdup(dst, src) \
	strdup_r(&dst, src)


#pragma pack()

#endif