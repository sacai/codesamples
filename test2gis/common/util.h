#ifndef _UTIL_
#define _UTIL_

/** \file
	\brief	Различные сервисные функции для использования как внутри библиотеки, так и в конкретных задачах

*/

#include <stdint.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "sys_defs.h"

extern "C" {

///////////////////////////////////////////////////////////////////////////////
/// Обрезание пробелов в начале и конце строки
/// \param [in, out] char *string - строка для обработки
/// \return указатель на строку без пробелов в начале и в конце
char *Trim(char *string);

///////////////////////////////////////////////////////////////////////////////
/// Возвращает имя файла без пути
/// \param [in] char *Path - полный путь и имя файла
/// \return указатель на имя файла
char* PointToName(char *Path);

///////////////////////////////////////////////////////////////////////////////
/// Подстановка переменных окружения в строку
/// \param [in]
/// char *src - строка, содержащая переменные окружения в виде $переменная
/// \param [out]
/// char *dst - буфер для строки, расширенной значениями переменных окружения
/// \param [in]
/// int dstSize - размер буфера в байтах
/// \param [in]
/// char *quotestr - строка символов. который могут быть использованы в качестве
///                  ограничителей, по умолчанию используется символ '$'
/// \return длина строки-результата, либо 0 в случае ошибки
int ExpandEnv(char *src, char *dst, int dstSize, char *quotestr = NULL);

///////////////////////////////////////////////////////////////////////////////
/// Добавляет слэш (\ или /) в строку пути файловой системы
/// \param [in, out] char *Path - строка пути
/// \param [in] int reverse - прямой (0) или обратный (1) слэш
/// \return нет
void AddEndSlash(char *Path, int reverse = 0);

///////////////////////////////////////////////////////////////////////////////
/// Получение размера файла по дескриптору (с использованием lseek)
/// \param [in]
/// int handle - дескриптор файла
/// \return
/// размер файла, либо -1 в случае ошибки
off_t GetFileSizeByHandle(int handle);

///////////////////////////////////////////////////////////////////////////////
/// Получение размера файла по дескриптору (с использованием lseek) с возвратом признака ошибки
/// \param [in]
/// int handle - дескриптор файла
/// \param [out]
/// off_t *size - размер файла
/// \return
/// EOK (0), либо признак ошибки
int GetFileSizeByHandleEx(int handle, off_t *size);

///////////////////////////////////////////////////////////////////////////////
/// Получение размера файла по имени (с использованием lseek)
/// \param [in]
/// char *name - имя файла
/// \return
/// размер файла, либо -1 в случае ошибки
off_t GetFileSizeByName(char *name);

///////////////////////////////////////////////////////////////////////////////
/// Получение размера файла по имени (с использованием lseek) с возвратом признака ошибки
/// \param
/// char *name - имя файла
/// \param [out]
/// off_t *size - размер файла
/// \return
/// EOK (0), либо признак ошибки
int GetFileSizeByNameEx(char *name, off_t *size);

///////////////////////////////////////////////////////////////////////////////
/// Сравнение строк без учета регистра
/// \param [in] const char *str1 - левая часть неравенства
/// \param [in] const char *str2 - правая часть неравенства
/// \return < 0, если str1 < str2
/// \return 0, если str1 == str2
/// \return > 0, если str1 > str2
int Stricmp(const char *str1, const char *str2);

///////////////////////////////////////////////////////////////////////////////
/// Сравнение строк без учета регистра не более чем заданного количества символов
/// \param [in] const char *str1 - левая часть неравенства
/// \param [in] const char *str2 - правая часть неравенства
/// \param [in] size_t count - количество сравниваемых символов
/// \return < 0, если str1 < str2
/// \return 0, если str1 == str2
/// \return > 0, если str1 > str2
int Strnicmp(const char *str1, const char *str2, size_t count);

};

#endif